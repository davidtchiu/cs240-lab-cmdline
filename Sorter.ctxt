#BlueJ class context
comment0.target=Sorter
comment0.text=\n\ A\ class\ with\ classic\ sorting\ algorithms.\n\ \n\ @author\ David\n\ @version\ 2/8/2018\n
comment1.params=list
comment1.target=int[]\ insertionSort(int[])
comment1.text=\n\ Insertion\ Sort\n\ @param\ list\ \ A\ list\ of\ ints\n\ @return\ a\ sorted\ list\ of\ ints\n
comment10.params=list\ start\ end
comment10.target=int[]\ quickSort(int[],\ int,\ int)
comment10.text=\n\ QuickSort\n\ @param\ list\ \ A\ list\ of\ ints\n\ @return\ a\ sorted\ list\ of\ ints\n
comment11.params=list\ start\ end
comment11.target=int\ partition(int[],\ int,\ int)
comment11.text=\n\ Partition\n\ @param\ list\ \ A\ list\ of\ ints\n\ @param\ start\ The\ start\ position\n\ @param\ end\ \ \ The\ end\ position\n\ @return\ The\ pivot's\ position\ in\ the\ list\n
comment12.params=list\ i\ j
comment12.target=void\ swap(int[],\ int,\ int)
comment12.text=\n\ Swaps\ two\ items,\ indexed\ by\ i\ and\ j\ in\ the\ given\ list\n
comment13.params=list
comment13.target=boolean\ inOrder(int[])
comment13.text=\n\ @return\ true\ if\ the\ given\ list\ is\ in\ ascending\ order,\ false\ otherwise\n
comment2.params=list
comment2.target=int[]\ selectionSort(int[])
comment2.text=\n\ Selection\ Sort\n\ @param\ list\ \ A\ list\ of\ ints\n\ @return\ a\ sorted\ list\ of\ ints\n
comment3.params=list
comment3.target=int[]\ bubbleSort(int[])
comment3.text=\n\ Bubble\ Sort\n\ @param\ list\ \ A\ list\ of\ ints\n\ @return\ a\ sorted\ list\ of\ ints\n
comment4.params=list
comment4.target=int[]\ shakerSort(int[])
comment4.text=\n\ Bubble\ Sort\n\ @param\ list\ \ A\ list\ of\ ints\n\ @return\ a\ sorted\ list\ of\ ints\n
comment5.params=list
comment5.target=int[]\ oddEvenSort(int[])
comment5.text=\n\ Odd-Even\ Sort\n\ @param\ list\ \ A\ list\ of\ ints\n\ @return\ a\ sorted\ list\ of\ ints\n
comment6.params=list
comment6.target=int[]\ heapSort(int[])
comment6.text=\n\ HeapSort,\ an\ O(n\ log\ n)\ sorting\ algorithm\!\n\ \n\ @param\ list\ \ A\ list\ of\ ints\n\ @return\ a\ sorted\ list\ of\ ints\n
comment7.params=list
comment7.target=int[]\ mergeSort(int[])
comment7.text=\n\ Merge\ Sort\n\ @param\ list\ \ A\ list\ of\ ints\n\ @return\ a\ sorted\ list\ of\ ints\n
comment8.params=first\ second
comment8.target=int[]\ merge(int[],\ int[])
comment8.text=\n\ Merges\ two\ pre-sorted\ lists\ into\ a\ sorted\ list\n\ @param\ first\ \ \ \ \ A\ sorted\ list\n\ @param\ second\ \ \ \ Another\ sorted\ list\n\ @return\ a\ sorted\ list\ containing\ elements\ from\ both\ input\ lists\n
comment9.params=list
comment9.target=int[]\ quickSort(int[])
comment9.text=\n\ QuickSort\n\ @param\ list\ \ A\ list\ of\ ints\n\ @return\ a\ sorted\ list\ of\ ints\n
numComments=14
